---
source: tests/generate_design_doc.rs
---
- `[&x]: &[&T]` => `x: &T`
```rust
[&x] @ s: &[&T]
// Applying rule `ConstructorRef`
&x @ &(*s).0: &&T
// Applying rule `Deref(EatOuter)`
x @ *&(*s).0: &T
// Applying rule `Binding`
let x: &T = *&(*s).0

// Final bindings (simplified):
let x: &T = (*s).0;
```

- `[&x]: &[&mut T]` => `x: &mut T`, move error
```rust
[&x] @ s: &[&mut T]
// Applying rule `ConstructorRef`
&x @ &(*s).0: &&mut T
// Applying rule `Deref(EatOuter)`
x @ *&(*s).0: &mut T
// Applying rule `Binding`
let x: &mut T = *&(*s).0

// Final bindings (simplified):
let x: &mut T = (*s).0; // Borrow-check error: CantCopyRefMut
```

- `[&&mut x]: &[&mut T]` => `x: T`
```rust
[&&mut x] @ s: &[&mut T]
// Applying rule `ConstructorRef`
&&mut x @ &(*s).0: &&mut T
// Applying rule `Deref(EatOuter)`
&mut x @ *&(*s).0: &mut T
// Applying rule `Deref(EatOuter)`
x @ **&(*s).0: T
// Applying rule `Binding`
let x: T = **&(*s).0

// Final bindings (simplified):
let x: T = *(*s).0;
```

- `[&mut x]: &mut [&T]` => `x: &T`
```rust
[&mut x] @ s: &mut [&T]
// Applying rule `ConstructorRef`
&mut x @ &mut (*s).0: &mut &T
// Applying rule `Deref(EatOuter)`
x @ *&mut (*s).0: &T
// Applying rule `Binding`
let x: &T = *&mut (*s).0

// Final bindings (simplified):
let x: &T = (*s).0;
```

- `[&mut x]: &[&mut T]` => type error
```rust
[&mut x] @ s: &[&mut T]
// Applying rule `ConstructorRef`
&mut x @ &(*s).0: &&mut T
// Type error for `&mut x @ &(*s).0: &&mut T`: MutabilityMismatch
```

- `&[[x]]: &[&mut [T]]` => `x: &mut T`, borrow error
```rust
&[[x]] @ s: &[&mut [T]]
// Applying rule `Deref(EatOuter)`
[[x]] @ *s: [&mut [T]]
// Applying rule `Constructor`
[x] @ (*s).0: &mut [T]
// Applying rule `ConstructorRef`
x @ &mut (*(*s).0).0: &mut T
// Applying rule `Binding`
let x: &mut T = &mut (*(*s).0).0

// Final bindings (simplified):
let x: &mut T = &mut (*(*s).0).0; // Borrow-check error: MutBorrowBehindSharedBorrow
```

- `&[[&x]]: &[&mut [T]]` => `x: T`, borrow error if we don't use simplification rules
```rust
&[[&x]] @ s: &[&mut [T]]
// Applying rule `Deref(EatOuter)`
[[&x]] @ *s: [&mut [T]]
// Applying rule `Constructor`
[&x] @ (*s).0: &mut [T]
// Applying rule `ConstructorRef`
&x @ &mut (*(*s).0).0: &mut T
// Applying rule `DerefMutWithShared(EatOuter)`
x @ *&*&mut (*(*s).0).0: T
// Applying rule `Binding`
let x: T = *&*&mut (*(*s).0).0

// Final bindings (simplified):
let x: T = (*(*s).0).0;
```

- `&[[&mut x]]: &[&mut [T]]` => `x: T`, borrow error if we don't use simplification rules
```rust
&[[&mut x]] @ s: &[&mut [T]]
// Applying rule `Deref(EatOuter)`
[[&mut x]] @ *s: [&mut [T]]
// Applying rule `Constructor`
[&mut x] @ (*s).0: &mut [T]
// Applying rule `ConstructorRef`
&mut x @ &mut (*(*s).0).0: &mut T
// Applying rule `Deref(EatOuter)`
x @ *&mut (*(*s).0).0: T
// Applying rule `Binding`
let x: T = *&mut (*(*s).0).0

// Final bindings (simplified):
let x: T = (*(*s).0).0;
```

- `[&ref mut x]: &mut [T]` => `x: &mut T`, borrow error
```rust
[&ref mut x] @ s: &mut [T]
// Applying rule `ConstructorRef`
&ref mut x @ &mut (*s).0: &mut T
// Applying rule `DerefMutWithShared(EatOuter)`
ref mut x @ *&*&mut (*s).0: T
// Applying rule `BindingBorrow`
x @ &mut *&*&mut (*s).0: &mut T
// Applying rule `Binding`
let x: &mut T = &mut *&*&mut (*s).0

// Final bindings (simplified):
let x: &mut T = &mut *&(*s).0; // Borrow-check error: MutBorrowBehindSharedBorrow
```

---
source: tests/generate_design_doc.rs
---
- `[&x]: &[&T]` => `x: &T`
```rust
let [&x]: &[&T] = s
// Applying rule `ConstructorRef`
let &x: &&T = &(*s).0
// Applying rule `Deref`
let x: &T = *&(*s).0
// Applying rule `Binding`
let x: &T = *&(*s).0

// Final bindings (simplified):
let x: &T = (*s).0;
```

- `[&x]: &[&mut T]` => `x: &mut T`, move error
```rust
let [&x]: &[&mut T] = s
// Applying rule `ConstructorRef`
let &x: &&mut T = &(*s).0
// Applying rule `Deref`
let x: &mut T = *&(*s).0
// Applying rule `Binding`
let x: &mut T = *&(*s).0

// Final bindings (simplified):
let x: &mut T = (*s).0; // Borrow-check error: CantCopyRefMut
```

- `[&&mut x]: &[&mut T]` => `x: T`
```rust
let [&&mut x]: &[&mut T] = s
// Applying rule `ConstructorRef`
let &&mut x: &&mut T = &(*s).0
// Applying rule `Deref`
let &mut x: &mut T = *&(*s).0
// Applying rule `Deref`
let x: T = **&(*s).0
// Applying rule `Binding`
let x: T = **&(*s).0

// Final bindings (simplified):
let x: T = *(*s).0;
```

- `[&mut x]: &mut [&T]` => `x: &T`
```rust
let [&mut x]: &mut [&T] = s
// Applying rule `ConstructorRef`
let &mut x: &mut &T = &mut (*s).0
// Applying rule `Deref`
let x: &T = *&mut (*s).0
// Applying rule `Binding`
let x: &T = *&mut (*s).0

// Final bindings (simplified):
let x: &T = (*s).0;
```

- `[&mut x]: &[&mut T]` => type error
```rust
let [&mut x]: &[&mut T] = s
// Applying rule `ConstructorRef`
let &mut x: &&mut T = &(*s).0
// Type error for `let &mut x: &&mut T = &(*s).0`: MutabilityMismatch
```

- `&[[x]]: &[&mut [T]]` => `x: &mut T`, borrow error
```rust
let &[[x]]: &[&mut [T]] = s
// Applying rule `Deref`
let [[x]]: [&mut [T]] = *s
// Applying rule `Constructor`
let [x]: &mut [T] = (*s).0
// Applying rule `ConstructorRef`
let x: &mut T = &mut (*(*s).0).0
// Applying rule `Binding`
let x: &mut T = &mut (*(*s).0).0

// Final bindings (simplified):
let x: &mut T = &mut (*(*s).0).0; // Borrow-check error: MutBorrowBehindSharedBorrow
```

- `&[[&x]]: &[&mut [T]]` => `x: T`, borrow error if we don't use simplification rules
```rust
let &[[&x]]: &[&mut [T]] = s
// Applying rule `Deref`
let [[&x]]: [&mut [T]] = *s
// Applying rule `Constructor`
let [&x]: &mut [T] = (*s).0
// Applying rule `ConstructorRef`
let &x: &mut T = &mut (*(*s).0).0
// Applying rule `DerefMutWithShared`
let x: T = *&*&mut (*(*s).0).0
// Applying rule `Binding`
let x: T = *&*&mut (*(*s).0).0

// Final bindings (simplified):
let x: T = (*(*s).0).0;
```

- `&[[&mut x]]: &[&mut [T]]` => `x: T`, borrow error if we don't use simplification rules
```rust
let &[[&mut x]]: &[&mut [T]] = s
// Applying rule `Deref`
let [[&mut x]]: [&mut [T]] = *s
// Applying rule `Constructor`
let [&mut x]: &mut [T] = (*s).0
// Applying rule `ConstructorRef`
let &mut x: &mut T = &mut (*(*s).0).0
// Applying rule `Deref`
let x: T = *&mut (*(*s).0).0
// Applying rule `Binding`
let x: T = *&mut (*(*s).0).0

// Final bindings (simplified):
let x: T = (*(*s).0).0;
```

- `[&ref mut x]: &mut [T]` => `x: &mut T`, borrow error
```rust
let [&ref mut x]: &mut [T] = s
// Applying rule `ConstructorRef`
let &ref mut x: &mut T = &mut (*s).0
// Applying rule `DerefMutWithShared`
let ref mut x: T = *&*&mut (*s).0
// Applying rule `BindingBorrow`
let x: &mut T = &mut *&*&mut (*s).0
// Applying rule `Binding`
let x: &mut T = &mut *&*&mut (*s).0

// Final bindings (simplified):
let x: &mut T = &mut *&(*s).0; // Borrow-check error: MutBorrowBehindSharedBorrow
```

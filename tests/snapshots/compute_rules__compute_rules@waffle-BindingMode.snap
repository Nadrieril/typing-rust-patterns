---
source: tests/compute_rules.rs
info:
  bundle_name: waffle
  options:
    match_constructor_through_ref: true
    ref_binding_on_inherited: ResetBindingMode
    mut_binding_on_inherited: Error
    inherited_ref_on_ref: EatOuter
    allow_ref_pat_on_ref_mut: false
    simplify_deref_mut: true
    eat_inherited_ref_alone: true
    downgrade_mut_inside_shared: true
    rules_display_style: BindingMode
---
p0 @ q.0: T0,  p1 @ q.1: T1
--------------------------- "Constructor"
[p0, p1] @ q: [T0, T1]

p0 @ &(*q).0: &T0,  p1 @ &(*q).1: &T1
------------------------------------- "ConstructorRef"
[p0, p1] @ q: &[T0, T1]

p0 @ &mut (*q).0: &mut T0,  p1 @ &mut (*q).1: &mut T1
----------------------------------------------------- "ConstructorRef"
[p0, p1] @ q: &mut [T0, T1]

[p0, p1] @ *q: &T
----------------- "ConstructorMultiRef"
[p0, p1] @ q: &&T

[p0, p1] @ &**q: &T
--------------------- "ConstructorMultiRef"
[p0, p1] @ q: &&mut T

[p0, p1] @ *q: &T
--------------------- "ConstructorMultiRef"
[p0, p1] @ q: &mut &T

[p0, p1] @ &mut **q: &mut T
--------------------------- "ConstructorMultiRef"
[p0, p1] @ q: &mut &mut T

p @ *q: T
---------- "Deref(EatOuter)"
&p @ q: &T

p @ *q: T
------------------ "Deref(EatOuter)"
&mut p @ q: &mut T

ref x @ reset(q): T
------------------------------------ "RefBindingResetBindingMode"
ref x @ q: &T, binding_mode(q) = ref

ref x @ reset(q): T
-------------------------------------------- "RefBindingResetBindingMode"
ref x @ q: &mut T, binding_mode(q) = ref mut

ref mut x @ reset(q): T
---------------------------------------- "RefBindingResetBindingMode"
ref mut x @ q: &T, binding_mode(q) = ref

ref mut x @ reset(q): T
------------------------------------------------ "RefBindingResetBindingMode"
ref mut x @ q: &mut T, binding_mode(q) = ref mut

x @ &q: &T
------------------------------------ "BindingBorrow"
ref x @ q: T, binding_mode(q) = move

x @ &mut q: &mut T
---------------------------------------- "BindingBorrow"
ref mut x @ q: T, binding_mode(q) = move

let x: T = q
------------ "Binding"
x @ q: T

let mut x: T = q
------------------------------------ "Binding"
mut x @ q: T, binding_mode(q) = move
